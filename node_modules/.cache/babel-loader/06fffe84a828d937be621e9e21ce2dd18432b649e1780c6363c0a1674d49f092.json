{"ast":null,"code":"const API_BASE_URL = 'http://localhost:5000/api';\n\n// Función para hacer peticiones HTTP\nconst fetchAPI = async (endpoint, options = {}) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error en fetchAPI:', error);\n    throw error;\n  }\n};\n\n// Servicios para productos\nexport const productosAPI = {\n  // Obtener todos los productos\n  getAll: () => fetchAPI('/productos'),\n  // Obtener producto por ID\n  getById: id => fetchAPI(`/productos/${id}`),\n  // Obtener inventario de un producto\n  getInventario: productoId => fetchAPI(`/inventario/${productoId}`)\n};\n\n// Servicios para categorías\nexport const categoriasAPI = {\n  getAll: () => fetchAPI('/categorias')\n};\n\n// Servicios para colores\nexport const coloresAPI = {\n  getAll: () => fetchAPI('/colores')\n};\n\n// Servicios para tallas\nexport const tallasAPI = {\n  getAll: () => fetchAPI('/tallas')\n};\n\n// Servicios para pedidos\nexport const pedidosAPI = {\n  // Crear nuevo pedido\n  create: pedidoData => fetchAPI('/pedidos', {\n    method: 'POST',\n    body: JSON.stringify(pedidoData)\n  })\n};\nconst apiService = {\n  productos: productosAPI,\n  categorias: categoriasAPI,\n  colores: coloresAPI,\n  tallas: tallasAPI,\n  pedidos: pedidosAPI\n};\nexport default apiService;","map":{"version":3,"names":["API_BASE_URL","fetchAPI","endpoint","options","response","fetch","headers","ok","Error","status","json","error","console","productosAPI","getAll","getById","id","getInventario","productoId","categoriasAPI","coloresAPI","tallasAPI","pedidosAPI","create","pedidoData","method","body","JSON","stringify","apiService","productos","categorias","colores","tallas","pedidos"],"sources":["C:/Users/ANDRES/Documents/ADSO/TRANSVERSAL/TRANSVERSAL PROGRAMACIION/PROYECTO/protecto stely/CatalogoReact/catalogoRopa/src/services/api.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:5000/api';\r\n\r\n// Función para hacer peticiones HTTP\r\nconst fetchAPI = async (endpoint, options = {}) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...options.headers,\r\n      },\r\n      ...options,\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error en fetchAPI:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Servicios para productos\r\nexport const productosAPI = {\r\n  // Obtener todos los productos\r\n  getAll: () => fetchAPI('/productos'),\r\n  \r\n  // Obtener producto por ID\r\n  getById: (id) => fetchAPI(`/productos/${id}`),\r\n  \r\n  // Obtener inventario de un producto\r\n  getInventario: (productoId) => fetchAPI(`/inventario/${productoId}`),\r\n};\r\n\r\n// Servicios para categorías\r\nexport const categoriasAPI = {\r\n  getAll: () => fetchAPI('/categorias'),\r\n};\r\n\r\n// Servicios para colores\r\nexport const coloresAPI = {\r\n  getAll: () => fetchAPI('/colores'),\r\n};\r\n\r\n// Servicios para tallas\r\nexport const tallasAPI = {\r\n  getAll: () => fetchAPI('/tallas'),\r\n};\r\n\r\n// Servicios para pedidos\r\nexport const pedidosAPI = {\r\n  // Crear nuevo pedido\r\n  create: (pedidoData) => fetchAPI('/pedidos', {\r\n    method: 'POST',\r\n    body: JSON.stringify(pedidoData),\r\n  }),\r\n};\r\n\r\nconst apiService = {\r\n  productos: productosAPI,\r\n  categorias: categoriasAPI,\r\n  colores: coloresAPI,\r\n  tallas: tallasAPI,\r\n  pedidos: pedidosAPI,\r\n};\r\n\r\nexport default apiService; "],"mappings":"AAAA,MAAMA,YAAY,GAAG,2BAA2B;;AAEhD;AACA,MAAMC,QAAQ,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;EACjD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,YAAY,GAAGE,QAAQ,EAAE,EAAE;MACzDI,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,GAAGH,OAAO,CAACG;MACb,CAAC;MACD,GAAGH;IACL,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACG,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBJ,QAAQ,CAACK,MAAM,EAAE,CAAC;IAC3D;IAEA,OAAO,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,YAAY,GAAG;EAC1B;EACAC,MAAM,EAAEA,CAAA,KAAMb,QAAQ,CAAC,YAAY,CAAC;EAEpC;EACAc,OAAO,EAAGC,EAAE,IAAKf,QAAQ,CAAC,cAAce,EAAE,EAAE,CAAC;EAE7C;EACAC,aAAa,EAAGC,UAAU,IAAKjB,QAAQ,CAAC,eAAeiB,UAAU,EAAE;AACrE,CAAC;;AAED;AACA,OAAO,MAAMC,aAAa,GAAG;EAC3BL,MAAM,EAAEA,CAAA,KAAMb,QAAQ,CAAC,aAAa;AACtC,CAAC;;AAED;AACA,OAAO,MAAMmB,UAAU,GAAG;EACxBN,MAAM,EAAEA,CAAA,KAAMb,QAAQ,CAAC,UAAU;AACnC,CAAC;;AAED;AACA,OAAO,MAAMoB,SAAS,GAAG;EACvBP,MAAM,EAAEA,CAAA,KAAMb,QAAQ,CAAC,SAAS;AAClC,CAAC;;AAED;AACA,OAAO,MAAMqB,UAAU,GAAG;EACxB;EACAC,MAAM,EAAGC,UAAU,IAAKvB,QAAQ,CAAC,UAAU,EAAE;IAC3CwB,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,UAAU;EACjC,CAAC;AACH,CAAC;AAED,MAAMK,UAAU,GAAG;EACjBC,SAAS,EAAEjB,YAAY;EACvBkB,UAAU,EAAEZ,aAAa;EACzBa,OAAO,EAAEZ,UAAU;EACnBa,MAAM,EAAEZ,SAAS;EACjBa,OAAO,EAAEZ;AACX,CAAC;AAED,eAAeO,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}